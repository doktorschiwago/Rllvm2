// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("structCall.ll", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128");
 mod->setTargetTriple("x86_64-apple-macosx10.7.0");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_0_args.push_back(Type::getDoubleTy(mod->getContext()));
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 StructType *StructTy_struct_CXCursor = mod->getTypeByName("struct.CXCursor");
 if (!StructTy_struct_CXCursor) {
 StructTy_struct_CXCursor = StructType::create(mod->getContext(), "struct.CXCursor");
 }
 std::vector<Type*>StructTy_struct_CXCursor_fields;
 StructTy_struct_CXCursor_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_struct_CXCursor_fields.push_back(Type::getDoubleTy(mod->getContext()));
 if (StructTy_struct_CXCursor->isOpaque()) {
 StructTy_struct_CXCursor->setBody(StructTy_struct_CXCursor_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_1 = PointerType::get(StructTy_struct_CXCursor, 0);
 
 std::vector<Type*>StructTy_3_fields;
 StructTy_3_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructTy_3_fields.push_back(Type::getDoubleTy(mod->getContext()));
 StructType *StructTy_3 = StructType::get(mod->getContext(), StructTy_3_fields, /*isPacked=*/false);
 
 PointerType* PointerTy_2 = PointerType::get(StructTy_3, 0);
 
 PointerType* PointerTy_4 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 PointerType* PointerTy_5 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);
 
 std::vector<Type*>FuncTy_6_args;
 FuncTy_6_args.push_back(PointerTy_1);
 FunctionType* FuncTy_6 = FunctionType::get(
  /*Result=*/Type::getDoubleTy(mod->getContext()),
  /*Params=*/FuncTy_6_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_7 = PointerType::get(PointerTy_1, 0);
 
 std::vector<Type*>FuncTy_8_args;
 FunctionType* FuncTy_8 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_8_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_9 = PointerType::get(FuncTy_6, 0);
 
 PointerType* PointerTy_10 = PointerType::get(FuncTy_0, 0);
 
 
 // Function Declarations
 
 Function* func_bar = mod->getFunction("bar");
 if (!func_bar) {
 func_bar = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"bar", mod); 
 func_bar->setCallingConv(CallingConv::C);
 }
 AttributeSet func_bar_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::StackProtect);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_bar_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_bar->setAttributes(func_bar_PAL);
 
 Function* func_f = mod->getFunction("f");
 if (!func_f) {
 func_f = Function::Create(
  /*Type=*/FuncTy_6,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"f", mod); 
 func_f->setCallingConv(CallingConv::C);
 }
 AttributeSet func_f_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::StackProtect);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_f_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_f->setAttributes(func_f_PAL);
 
 Function* func_Main = mod->getFunction("Main");
 if (!func_Main) {
 func_Main = Function::Create(
  /*Type=*/FuncTy_8,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"Main", mod); 
 func_Main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_Main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::StackProtect);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_Main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_Main->setAttributes(func_Main_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_11 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_12 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 ConstantFP* const_double_13 = ConstantFP::get(mod->getContext(), APFloat(2.000000e+00));
 ConstantFP* const_double_14 = ConstantFP::get(mod->getContext(), APFloat(3.141539e+00));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: bar (func_bar)
 {
  Function::arg_iterator args = func_bar->arg_begin();
  Value* int32_b_coerce0 = args++;
  int32_b_coerce0->setName("b.coerce0");
  Value* double_b_coerce1 = args++;
  double_b_coerce1->setName("b.coerce1");
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_bar,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_b = new AllocaInst(StructTy_struct_CXCursor, "b", label_entry);
  ptr_b->setAlignment(8);
  CastInst* ptr_15 = new BitCastInst(ptr_b, PointerTy_2, "", label_entry);
  std::vector<Value*> ptr_16_indices;
  ptr_16_indices.push_back(const_int32_12);
  ptr_16_indices.push_back(const_int32_12);
  Instruction* ptr_16 = GetElementPtrInst::Create(ptr_15, ptr_16_indices, "", label_entry);
  StoreInst* void_17 = new StoreInst(int32_b_coerce0, ptr_16, false, label_entry);
  std::vector<Value*> ptr_18_indices;
  ptr_18_indices.push_back(const_int32_12);
  ptr_18_indices.push_back(const_int32_11);
  Instruction* ptr_18 = GetElementPtrInst::Create(ptr_15, ptr_18_indices, "", label_entry);
  StoreInst* void_19 = new StoreInst(double_b_coerce1, ptr_18, false, label_entry);
  std::vector<Value*> ptr_i_indices;
  ptr_i_indices.push_back(const_int32_12);
  ptr_i_indices.push_back(const_int32_12);
  Instruction* ptr_i = GetElementPtrInst::Create(ptr_b, ptr_i_indices, "i", label_entry);
  LoadInst* int32_20 = new LoadInst(ptr_i, "", false, label_entry);
  int32_20->setAlignment(4);
  ReturnInst::Create(mod->getContext(), int32_20, label_entry);
  
 }
 
 // Function: f (func_f)
 {
  Function::arg_iterator args = func_f->arg_begin();
  Value* ptr_b_22 = args++;
  ptr_b_22->setName("b");
  
  BasicBlock* label_entry_23 = BasicBlock::Create(mod->getContext(), "entry",func_f,0);
  
  // Block entry (label_entry_23)
  AllocaInst* ptr_b_addr = new AllocaInst(PointerTy_1, "b.addr", label_entry_23);
  ptr_b_addr->setAlignment(8);
  AllocaInst* ptr_k = new AllocaInst(Type::getDoubleTy(mod->getContext()), "k", label_entry_23);
  ptr_k->setAlignment(8);
  StoreInst* void_24 = new StoreInst(ptr_b_22, ptr_b_addr, false, label_entry_23);
  void_24->setAlignment(8);
  LoadInst* ptr_25 = new LoadInst(ptr_b_addr, "", false, label_entry_23);
  ptr_25->setAlignment(8);
  std::vector<Value*> ptr_d_indices;
  ptr_d_indices.push_back(const_int32_12);
  ptr_d_indices.push_back(const_int32_11);
  Instruction* ptr_d = GetElementPtrInst::Create(ptr_25, ptr_d_indices, "d", label_entry_23);
  LoadInst* double_26 = new LoadInst(ptr_d, "", false, label_entry_23);
  double_26->setAlignment(8);
  StoreInst* void_27 = new StoreInst(double_26, ptr_k, false, label_entry_23);
  void_27->setAlignment(8);
  LoadInst* double_28 = new LoadInst(ptr_k, "", false, label_entry_23);
  double_28->setAlignment(8);
  BinaryOperator* double_mul = BinaryOperator::Create(Instruction::FMul, const_double_13, double_28, "mul", label_entry_23);
  ReturnInst::Create(mod->getContext(), double_mul, label_entry_23);
  
 }
 
 // Function: Main (func_Main)
 {
  
  BasicBlock* label_entry_30 = BasicBlock::Create(mod->getContext(), "entry",func_Main,0);
  
  // Block entry (label_entry_30)
  AllocaInst* ptr_a = new AllocaInst(StructTy_struct_CXCursor, "a", label_entry_30);
  ptr_a->setAlignment(8);
  std::vector<Value*> ptr_i_31_indices;
  ptr_i_31_indices.push_back(const_int32_12);
  ptr_i_31_indices.push_back(const_int32_12);
  Instruction* ptr_i_31 = GetElementPtrInst::Create(ptr_a, ptr_i_31_indices, "i", label_entry_30);
  StoreInst* void_32 = new StoreInst(const_int32_12, ptr_i_31, false, label_entry_30);
  void_32->setAlignment(4);
  std::vector<Value*> ptr_d_33_indices;
  ptr_d_33_indices.push_back(const_int32_12);
  ptr_d_33_indices.push_back(const_int32_11);
  Instruction* ptr_d_33 = GetElementPtrInst::Create(ptr_a, ptr_d_33_indices, "d", label_entry_30);
  StoreInst* void_34 = new StoreInst(const_double_14, ptr_d_33, false, label_entry_30);
  void_34->setAlignment(8);
  CallInst* double_call = CallInst::Create(func_f, ptr_a, "call", label_entry_30);
  double_call->setCallingConv(CallingConv::C);
  double_call->setTailCall(false);
  AttributeSet double_call_PAL;
  double_call->setAttributes(double_call_PAL);
  
  std::vector<Value*> ptr_d1_indices;
  ptr_d1_indices.push_back(const_int32_12);
  ptr_d1_indices.push_back(const_int32_11);
  Instruction* ptr_d1 = GetElementPtrInst::Create(ptr_a, ptr_d1_indices, "d1", label_entry_30);
  StoreInst* void_35 = new StoreInst(double_call, ptr_d1, false, label_entry_30);
  void_35->setAlignment(8);
  CastInst* ptr_36 = new BitCastInst(ptr_a, PointerTy_2, "", label_entry_30);
  std::vector<Value*> ptr_37_indices;
  ptr_37_indices.push_back(const_int32_12);
  ptr_37_indices.push_back(const_int32_12);
  Instruction* ptr_37 = GetElementPtrInst::Create(ptr_36, ptr_37_indices, "", label_entry_30);
  LoadInst* int32_38 = new LoadInst(ptr_37, "", false, label_entry_30);
  int32_38->setAlignment(1);
  std::vector<Value*> ptr_39_indices;
  ptr_39_indices.push_back(const_int32_12);
  ptr_39_indices.push_back(const_int32_11);
  Instruction* ptr_39 = GetElementPtrInst::Create(ptr_36, ptr_39_indices, "", label_entry_30);
  LoadInst* double_40 = new LoadInst(ptr_39, "", false, label_entry_30);
  double_40->setAlignment(1);
  std::vector<Value*> int32_call2_params;
  int32_call2_params.push_back(int32_38);
  int32_call2_params.push_back(double_40);
  CallInst* int32_call2 = CallInst::Create(func_bar, int32_call2_params, "call2", label_entry_30);
  int32_call2->setCallingConv(CallingConv::C);
  int32_call2->setTailCall(false);
  AttributeSet int32_call2_PAL;
  int32_call2->setAttributes(int32_call2_PAL);
  
  ReturnInst::Create(mod->getContext(), int32_call2, label_entry_30);
  
 }
 
 return mod;
}

<?xml version="1.0"?>
<article xmlns:r="http://www.r-project.org"
         xmlns:xi="http://www.w3.org/2003/XInclude"
	 xmlns:c="http://www.C.org">

<articleinfo>

<title>On Compiling Access to <c:routine>fgets</c:routine></title>

<author><firstname>Duncan</firstname><surname>Temple Lang</surname>
  <affiliation><orgname>University of California at Davis</orgname>
               <orgdiv>Department of Statistics</orgdiv>
  </affiliation>
</author>
</articleinfo>

<section>
<title>Overview</title>

<para>
We use this in our <doc href="sampleCSV.Rdb">sampleCSV()</doc>.
</para>
<para>
We will use the <c/> routine <c:routine>fgets</c:routine> to read
a line. We have to specify the memory into which it will place the 
line contents. We can allocate space or alternatively we can use a module-specific
<quote>global</quote> variable.
We create a global variable which is a char array of length 1000.
Then we will have to pass a pointer to this array in our call to <c:routine>fgets</c:routine>.


<r:code>
library(RLLVMCompile)
mod = Module("fgets")
ee = ExecutionEngine(mod)

stringPointerType = pointerType(getIntegerType(8L))
FILEType = pointerType(Int32Type) # an opaque struct type?

.str = createGlobalVariable(".str", mod, val = string(1000), linkage = PrivateLinkage)

 # we'd like to be able to use .str and have R functions call getGetElementPtr for us.
p = getGetElementPtr(.str)
createGlobalVariable("ptr", mod, stringPointerType, p) 

  # could specify this information via .routineInfo parameter of compileFunction()
declareFunction(list(stringPointerType, stringPointerType, Int32Type, FILEType), "fgets", mod) 
</r:code>


<r:code>
Fgets  =
function(file)
{
   fgets(ptr, 1000L, file) #  != NULL # should raise an error if NULL.
}
</r:code>

Now we can compile the function
<r:code>
compileFunction(Fgets, stringPointerType, list(FILEType), mod, name = "Fgets")
</r:code>

Note that we could use <r:var>.str</r:var> rather than <r:var>ptr</r:var> in the call to 
<r:func>fgets</r:func> and our compiler should figure out to use
the pointer to <r:var>.str</r:var> via a <r:func>getGetElementPtr</r:func> call.

</para>


<para>

</para>


</section>
</article>
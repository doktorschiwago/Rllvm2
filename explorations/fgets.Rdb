<?xml version="1.0"?>
<article xmlns:r="http://www.r-project.org"
         xmlns:xi="http://www.w3.org/2003/XInclude"
	 xmlns:c="http://www.C.org">

<articleinfo>

<title>On Compiling Access to <c:routine>fgets</c:routine></title>

<author><firstname>Duncan</firstname><surname>Temple Lang</surname>
  <affiliation><orgname>University of California at Davis</orgname>
               <orgdiv>Department of Statistics</orgdiv>
  </affiliation>
</author>
</articleinfo>

<section>
<title>Overview</title>

<para>
We use this in our <doc href="sampleCSV.Rdb">sampleCSV()</doc>.
</para>
<para>
We will use the <c/> routine <c:routine>fgets</c:routine> to read
a line. We have to specify the memory into which it will place the 
line contents. We can allocate space or alternatively we can use a module-specific
<quote>global</quote> variable.
We create a global variable which is a char array of length 1000.
Then we will have to pass a pointer to this array in our call to <c:routine>fgets</c:routine>.


<r:code>
library(RLLVMCompile)
mod = Module("fgets")
ee = ExecutionEngine(mod)

stringType = pointerType(getIntegerType(8L, Rllvm:::getContext(mod)))
FILEType = pointerType(Int32Type) # an opaque struct type?

.str = createGlobalVariable(".str", mod, val = string(1000), linkage = PrivateLinkage)

 # we'd like to be able to use .str and have R functions call getGetElementPtr for us.
p = getGetElementPtr(.str)
.ptr = createGlobalVariable("ptr", mod, stringType, p) 

  # could specify this information via .routineInfo parameter of compileFunction()
declareFunction(list(stringType, stringType, Int32Type, FILEType), "t_fgets", mod) 
</r:code>


<r:code>
Fgets  =
function(file)
{
  t_fgets(ptr, 1000L, file) #  != NULL # should raise an error if NULL.
  1L
}
</r:code>

Now we can compile the function
<r:code eval="false">
compileFunction(Fgets, stringType, list(FILEType), mod, name = "Fgets")
</r:code>
<r:code>
fun = compileFunction(Fgets, Int32Type, list(FILEType), mod, name = "Fgets")
</r:code>

<q>
This  claims there is a mismatch in the argument types. 
In ../simpleCall.R, we go through each of the parameters and see
which fail.  The problem appears that the type of the global variable
ptr is not the same as stringType.
Is it that we are not loading the variable?
</q>


Note that we could use <r:var>.str</r:var> rather than <r:var>ptr</r:var> in the call to 
<r:func>fgets</r:func> and our compiler should figure out to use
the pointer to <r:var>.str</r:var> via a <r:func>getGetElementPtr</r:func> call.

</para>


<para>
<r:code eval="false" id="test">
dyn.load("explorations/testFgets.so")
llvmAddSymbol(t_fgets = getNativeSymbolInfo("t_fgets")$address)
library(RCurl)
f = CFILE("DESCRIPTION", "r")
.llvm(fun, f@ref)
</r:code>

</para>


</section>
</article>
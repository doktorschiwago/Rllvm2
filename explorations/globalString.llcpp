// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/LLVMContext.h>
#include <llvm/Module.h>
#include <llvm/DerivedTypes.h>
#include <llvm/Constants.h>
#include <llvm/GlobalVariable.h>
#include <llvm/Function.h>
#include <llvm/CallingConv.h>
#include <llvm/BasicBlock.h>
#include <llvm/Instructions.h>
#include <llvm/InlineAsm.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("globalString.ll", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64");
 mod->setTargetTriple("x86_64-apple-macosx10.7.4");
 
 // Type Definitions
 ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 17);
 
 PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);
 
 PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 PointerType* PointerTy_3 = PointerType::get(PointerTy_2, 0);
 
 ArrayType* ArrayTy_4 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 11);
 
 PointerType* PointerTy_5 = PointerType::get(ArrayTy_4, 0);
 
 PointerType* PointerTy_6 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);
 
 PointerType* PointerTy_7 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 PointerType* PointerTy_8 = PointerType::get(Type::getFloatTy(mod->getContext()), 0);
 
 ArrayType* ArrayTy_9 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 99);
 
 PointerType* PointerTy_10 = PointerType::get(ArrayTy_9, 0);
 
 std::vector<Type*>FuncTy_11_args;
 FunctionType* FuncTy_11 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_11_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_13_args;
 FuncTy_13_args.push_back(PointerTy_2);
 FunctionType* FuncTy_13 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_13_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_12 = PointerType::get(FuncTy_13, 0);
 
 std::vector<Type*>FuncTy_14_args;
 FunctionType* FuncTy_14 = FunctionType::get(
  /*Result=*/PointerTy_2,
  /*Params=*/FuncTy_14_args,
  /*isVarArg=*/false);
 
 
 // Function Declarations
 
 Function* func_getLen1 = mod->getFunction("getLen1");
 if (!func_getLen1) {
 func_getLen1 = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"getLen1", mod); 
 func_getLen1->setCallingConv(CallingConv::C);
 }
 AttrListPtr func_getLen1_PAL;
 {
  SmallVector<AttributeWithIndex, 4> Attrs;
  AttributeWithIndex PAWI;
  PAWI.Index = 4294967295U;
 {
    AttrBuilder B;
    B.addAttribute(Attributes::NoUnwind);
    B.addAttribute(Attributes::StackProtect);
    PAWI.Attrs = Attributes::get(mod->getContext(), B);
 }
  Attrs.push_back(PAWI);
  func_getLen1_PAL = AttrListPtr::get(mod->getContext(), Attrs);
  
 }
 func_getLen1->setAttributes(func_getLen1_PAL);
 
 Function* func_strlen = mod->getFunction("strlen");
 if (!func_strlen) {
 func_strlen = Function::Create(
  /*Type=*/FuncTy_13,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"strlen", mod); // (external, no body)
 func_strlen->setCallingConv(CallingConv::C);
 }
 AttrListPtr func_strlen_PAL;
 func_strlen->setAttributes(func_strlen_PAL);
 
 Function* func_getLen2 = mod->getFunction("getLen2");
 if (!func_getLen2) {
 func_getLen2 = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"getLen2", mod); 
 func_getLen2->setCallingConv(CallingConv::C);
 }
 AttrListPtr func_getLen2_PAL;
 {
  SmallVector<AttributeWithIndex, 4> Attrs;
  AttributeWithIndex PAWI;
  PAWI.Index = 4294967295U;
 {
    AttrBuilder B;
    B.addAttribute(Attributes::NoUnwind);
    B.addAttribute(Attributes::StackProtect);
    PAWI.Attrs = Attributes::get(mod->getContext(), B);
 }
  Attrs.push_back(PAWI);
  func_getLen2_PAL = AttrListPtr::get(mod->getContext(), Attrs);
  
 }
 func_getLen2->setAttributes(func_getLen2_PAL);
 
 Function* func_getStr2 = mod->getFunction("getStr2");
 if (!func_getStr2) {
 func_getStr2 = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"getStr2", mod); 
 func_getStr2->setCallingConv(CallingConv::C);
 }
 AttrListPtr func_getStr2_PAL;
 {
  SmallVector<AttributeWithIndex, 4> Attrs;
  AttributeWithIndex PAWI;
  PAWI.Index = 4294967295U;
 {
    AttrBuilder B;
    B.addAttribute(Attributes::NoUnwind);
    B.addAttribute(Attributes::StackProtect);
    PAWI.Attrs = Attributes::get(mod->getContext(), B);
 }
  Attrs.push_back(PAWI);
  func_getStr2_PAL = AttrListPtr::get(mod->getContext(), Attrs);
  
 }
 func_getStr2->setAttributes(func_getStr2_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 
 GlobalVariable* gvar_ptr_str1_p = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/PointerTy_2,
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"str1_p");
 gvar_ptr_str1_p->setAlignment(8);
 
 GlobalVariable* gvar_array_str2_a = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_4,
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"str2_a");
 gvar_array_str2_a->setAlignment(1);
 
 GlobalVariable* gvar_double_pi = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/Type::getDoubleTy(mod->getContext()),
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"pi");
 gvar_double_pi->setAlignment(8);
 
 GlobalVariable* gvar_int32_i = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/IntegerType::get(mod->getContext(), 32),
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"i");
 gvar_int32_i->setAlignment(4);
 
 GlobalVariable* gvar_float_f = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/Type::getFloatTy(mod->getContext()),
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"f");
 gvar_float_f->setAlignment(4);
 
 GlobalVariable* gvar_array_str3_a_noinit = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_9,
 /*isConstant=*/false,
 /*Linkage=*/GlobalValue::CommonLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/"str3_a_noinit");
 gvar_array_str3_a_noinit->setAlignment(16);
 
 // Constant Definitions
 Constant *const_array_15 = ConstantDataArray::getString(mod->getContext(), "This is a string", true);
 std::vector<Constant*> const_ptr_16_indices;
 ConstantInt* const_int32_17 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 const_ptr_16_indices.push_back(const_int32_17);
 const_ptr_16_indices.push_back(const_int32_17);
 Constant* const_ptr_16 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_16_indices);
 Constant *const_array_18 = ConstantDataArray::getString(mod->getContext(), "So is this", true);
 ConstantFP* const_double_19 = ConstantFP::get(mod->getContext(), APFloat(3.141593e+00));
 ConstantInt* const_int32_20 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("97"), 10));
 ConstantFP* const_float_21 = ConstantFP::get(mod->getContext(), APFloat(3.450000e+01f));
 ConstantAggregateZero* const_array_22 = ConstantAggregateZero::get(ArrayTy_9);
 std::vector<Constant*> const_ptr_23_indices;
 const_ptr_23_indices.push_back(const_int32_17);
 const_ptr_23_indices.push_back(const_int32_17);
 Constant* const_ptr_23 = ConstantExpr::getGetElementPtr(gvar_array_str2_a, const_ptr_23_indices);
 
 // Global Variable Definitions
 gvar_array__str->setInitializer(const_array_15);
 gvar_ptr_str1_p->setInitializer(const_ptr_16);
 gvar_array_str2_a->setInitializer(const_array_18);
 gvar_double_pi->setInitializer(const_double_19);
 gvar_int32_i->setInitializer(const_int32_20);
 gvar_float_f->setInitializer(const_float_21);
 gvar_array_str3_a_noinit->setInitializer(const_array_22);
 
 // Function Definitions
 
 // Function: getLen1 (func_getLen1)
 {
  
  BasicBlock* label_24 = BasicBlock::Create(mod->getContext(), "",func_getLen1,0);
  
  // Block  (label_24)
  LoadInst* ptr_25 = new LoadInst(gvar_ptr_str1_p, "", false, label_24);
  ptr_25->setAlignment(8);
  CallInst* int64_26 = CallInst::Create(func_strlen, ptr_25, "", label_24);
  int64_26->setCallingConv(CallingConv::C);
  int64_26->setTailCall(false);
  AttrListPtr int64_26_PAL;
  int64_26->setAttributes(int64_26_PAL);
  
  CastInst* int32_27 = new TruncInst(int64_26, IntegerType::get(mod->getContext(), 32), "", label_24);
  ReturnInst::Create(mod->getContext(), int32_27, label_24);
  
 }
 
 // Function: getLen2 (func_getLen2)
 {
  
  BasicBlock* label_29 = BasicBlock::Create(mod->getContext(), "",func_getLen2,0);
  
  // Block  (label_29)
  CallInst* int64_30 = CallInst::Create(func_strlen, const_ptr_23, "", label_29);
  int64_30->setCallingConv(CallingConv::C);
  int64_30->setTailCall(false);
  AttrListPtr int64_30_PAL;
  int64_30->setAttributes(int64_30_PAL);
  
  CastInst* int32_31 = new TruncInst(int64_30, IntegerType::get(mod->getContext(), 32), "", label_29);
  ReturnInst::Create(mod->getContext(), int32_31, label_29);
  
 }
 
 // Function: getStr2 (func_getStr2)
 {
  
  BasicBlock* label_33 = BasicBlock::Create(mod->getContext(), "",func_getStr2,0);
  
  // Block  (label_33)
  ReturnInst::Create(mod->getContext(), const_ptr_23, label_33);
  
 }
 
 return mod;
}
